@import './variables'; // 引用自定义变量

/* reset style---样式重置 */
* {
  box-sizing: border-box;
  outline: none;
}
html {
  font-size: 18px;
  background: #F1F1F1 url(../images/bg2.png) no-repeat;
  background-size: 103% 103%;
}
body {
  margin: 0;
  line-height: 1.2rem;
  font-family: 'NotoSerifSC-Medium', serif, PingFangSC-Regular, 微软雅黑, sans-serif;
  // background: #F1F1F1 url(../images/bg1.jpg) no-repeat;
  // background-size: contain;
  -webkit-font-smoothing: antialiased; // 更细的像素视觉效果
}
a {
  color: map-get($map: $colors, $key: 'blue');
  text-decoration: none;
}

a:visited {
  color: map-get($map: $colors, $key: 'doderBlue');
}

p {
  line-height: 1.5rem;
}

/* text and background color---定义字体和背景颜色 */
@each $colorKey, $color in $colors {
  .text-#{$colorKey} {
    color: $color;
  }

  .bg-#{$colorKey} {
    background-color: $color;
  }
}

/* text---定义字体对齐方式 */
@each $var in (left, center, right) {
  .text-#{$var} {
    text-align: $var !important; // 强制应用
  }
}
@each $sizeKey, $size in $font-sizes {
  .fs-#{$sizeKey} {
    font-size: $size * $base-font-size;
  }
}

/* text overflow---文字溢出时的样式 */
.text-ellipsis {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* flex---flex布局相关 */
.d-flex {
  display: flex;
}
.flex-column {
  flex-direction: column; // 纵向排列
}
.flex-wrap {
  flex-wrap: wrap; // 换行
}
@each $key, $value in $flex-jc {
  .jc-#{$key} {
    justify-content: $value;
  }
}
@each $key, $value in $flex-ai {
  .ai-#{$key} {
    align-items: $value;
  }
}
.flex-grow-1 {
  flex-grow: 1; // 规定了 flex-grow 项在 flex 容器中分配剩余空间的相对比例
}

/* width, height---常用宽度和高度定义 */
.w-100 {
  width: 100%;
}
.h-100 {
  height: 100%;
}

/* spacing--常用边距 */
@each $typeKey, $type in $spacing-types {
  @each $sizeKey, $size in $spacing-sizes {
    // .m-1 { margin: 1rem; }
    .#{$typeKey}-#{$sizeKey} {
      #{$type}: $size * $spacing-base-size;
    }
  }
  @each $sizeKey, $size in $spacing-sizes {
    // .mx-1 { margin-left: 1rem; margin-right: 1rem }
    .#{$typeKey}x-#{$sizeKey} {
      #{$type}-left: $size * $spacing-base-size;
      #{$type}-right: $size * $spacing-base-size;
    }
    // .my-1 { margin-top: 1rem; margin-bottom: 1rem; }
    .#{$typeKey}y-#{$sizeKey} {
      #{$type}-top: $size * $spacing-base-size;
      #{$type}-bottom: $size * $spacing-base-size;
    }
  }
  @each $directionKey, $direction in $spacing-directions {
    @each $sizeKey, $size in $spacing-sizes {
      // mt-1 { margin-top: 1rem; }
      .#{$typeKey}#{$directionKey}-#{$sizeKey} {
        #{$type}-#{$direction}: $size * $spacing-base-size
      }
    }
  }
}

